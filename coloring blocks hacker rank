#!/bin/python3

import math
import os
import random
import re
import sys


#
# Complete the 'minPrice' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY cost as parameter.
#importing the necassary libraries

def minPrice(costs):
    '''
    :itype costs: List[List[int]]
    :rtype: int
    '''
    # The total length
    m = len(costs)
    
    # Dealing with corner cases
    if m == 0 : 
        return 0
    else:
        # Creating a dynamic programming table through list comprehnsion.
        dp = [[0 for i in range(3)] for j in range(m)]
        
        # Initializing the first tow of the dynamic programming table.
        dp[0] = costs[0]
        
        # Looping through table
        for i in range(1,m):
                   
            dp[i][0] = min(dp[i-1][1],dp[i-1][2]) + costs[i][0] # 1,2,0
            dp[i][1] = min(dp[i-1][0],dp[i-1][2]) + costs[i][1] # 0,2,1 
            dp[i][2] = min(dp[i-1][0],dp[i-1][1]) + costs[i][2] # 0,1,2
        # From the last row in the table get the lowest sum formed from the best combination.
        return min(dp[m-1][0], dp[m-1][1], dp[m-1][2])
            
    
    
if __name__ == '__main__':
