correct = [[1,2,3],
           [2,3,1],
           [3,1,2]]

incorrect = [[1,2,3,4],
             [2,3,1,3],
             [3,1,2,3],
             [4,4,4,4]]

incorrect2 = [[1,2,3,4],
             [2,3,1,4],
             [4,1,2,3],
             [3,4,1,2]]

incorrect3 = [[1,2,3,4,5],
              [2,3,1,5,6],
              [4,5,2,1,3],
              [3,4,5,2,1],
              [5,6,4,3,2]]

incorrect4 = [['a','b','c'],
              ['b','c','a'],
              ['c','a','b']]

incorrect5 = [ [1, 1.5],
               [1.5, 1]]
               
# Define a function check_sudoku() here:



def check_sudoku(square):
    '''
    Code Block Number 1: Loops through every element in every subarray and then checks if it is
    in the list, and if it then we register it as removed otherwise we return False.
    ## Checking By Row
    
    Code Block Number 2: Loops through the coloumns by looping through the rows a number of times
    
    '''
    # Rows Check.
    for row in square:
        check_list = list(range(1, len(square[0]) + 1)) # This has all the numbers
        for i in row:
            if i in check_list:
                check_list.remove(i) # Remove it from the list
            else:
                return False
            
    # Columns Check.
    for n in range(len(square[0])):
        check_list = list(range(1, len(square[0]) + 1))
        for row in square:
            if row[n] in check_list:
                check_list.remove(row[n])
            else:
                return False
            
    return True  
        
        
    


    
    
#print(check_sudoku(incorrect))
#>>> False

#print(check_sudoku(correct))
#>>> True

#print(check_sudoku(incorrect2))
#>>> False

#print(check_sudoku(incorrect3))
#>>> False

#print(check_sudoku(incorrect4))
#>>> False

#print(check_sudoku(incorrect5))
#>>> False


