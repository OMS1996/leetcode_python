#########################################Answer 1 works on Leetcode ################################################################
class Solution(object):
    def twoSum(self, nums, target):
        # two point
        nums_index = [(v, index) for index, v in enumerate(nums)]
        nums_index.sort()
        begin, end = 0, len(nums) - 1
        while begin < end:
            curr = nums_index[begin][0] + nums_index[end][0]
            if curr == target:
                return [nums_index[begin][1], nums_index[end][1]]
            elif curr < target:
                begin += 1
            else:
                end -= 1



#########################################Answer 2 works on Leetcode ################################################################
class Solution(object):
    def check(self,subset,target):
        for idx,val1 in enumerate(subset):
            for idx2,val2 in enumerate(subset):
                if val1+val2 == target and idx!=idx2:
                    return [idx,idx2]

    def twoSum(self,subset, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
            """
        return self.check(subset,target)


################################################## Answer 3 works but not on LeetCode #########################################
def check(subset,target):
    for idx,val1 in enumerate(subset):
        for idx2,val2 in enumerate(subset):
            if val1+val2 == target and idx!=idx2:
                return [idx,idx2]
            
def twoSum(nums, target):
    """
    :type nums: List[int]
    :type target: int
    :rtype: List[int]
        """
    #removing the duplicates using dictionaries because dictionaries can't have
    nums= list(dict.fromkeys(nums))
    #making the list smaller
    subset = [n for n in nums if n<=target]
    return check(subset,target)
