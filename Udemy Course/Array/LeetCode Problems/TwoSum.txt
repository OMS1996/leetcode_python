# Solution 1: This Answer is BigO(NlogN)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        
        # getting the SIZE
        n = len(nums)

        # Sorted array Big O(nlogn)
        sort_arr = sorted(nums)

        # Starting
        i = 0

        # last index.
        j = n-1

        # Getting the actual values.
        while(n > i and j > 0):
            if i != j:
                tot = sort_arr[i] + sort_arr[j]
                if tot == target:
                    break
                if tot < target:
                    i += 1
                if tot > target:
                    j -= 1

        # Saving some memory
        lst = [None,None]

        # Getting the index
        for k in range(len(nums)):
            if nums[k] == sort_arr[i] and lst[0] == None:
                lst[0] = k
            elif nums[k] == sort_arr[j]:
                lst[1] = k
        return lst

        
        
        
        
        